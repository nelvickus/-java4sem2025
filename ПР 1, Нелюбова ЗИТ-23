import .awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// Model
class EquationModel {

    public double calculate(String equation) {
        // Validate the equation
        validateEquation(equation);

        // Normalize the equation
        equation = normalizeEquation(equation);

        // Evaluate the equation (implementation details)
        return evaluateEquation(equation);
    }


    private void validateEquation(String equation) {
        if (equation == null || equation.isEmpty()) {
            throw new IllegalArgumentException("Equation cannot be empty.");
        }

        // Equation must start and end with a number
        if (!Pattern.matches("^-?\\d+(\\.\\d+)?.*\\d+(\\.\\d+)?$", equation.trim())) {
            throw new IllegalArgumentException("Equation must start and end with a number.");
        }

        //Check for invalid number of terms
        String[] terms = equation.split("[+\\-*/^]");
        if(terms.length > 100) {
            throw new IllegalArgumentException("Equation exceeds the maximum number of terms (100).");
        }

        //Check for consecutive operators
        if (equation.matches(".*[+\\-*/^]{2,}.*")) {
            throw new IllegalArgumentException("Equation contains consecutive operators.");
        }
    }

    private String normalizeEquation(String equation) {
        //Remove whitespace
        equation = equation.replaceAll("\\s+", "");

        //Replace "//" with "/"
        equation = equation.replace("//", "/");

        return equation;
    }

    private double evaluateEquation(String equation) {
       // Shunting Yard Algorithm with Operator Precedence.  Handles subtraction and negative numbers.
        List<String> outputQueue = new ArrayList<>();
        List<String> operatorStack = new ArrayList<>();
        Pattern numberPattern = Pattern.compile("-?\\d+(\\.\\d+)?");
        Pattern operatorPattern = Pattern.compile("[+\\-*/^]");

        // Tokenize the equation
        Matcher numberMatcher = numberPattern.matcher(equation);
        Matcher operatorMatcher = operatorPattern.matcher(equation);

        int lastNumberEnd = 0; //Track the end of the last number to handle unary minus
        while (numberMatcher.find()) {
            //Add the number to the output queue
            outputQueue.add(numberMatcher.group());

            if (numberMatcher.end() < equation.length()) {
                operatorMatcher.region(numberMatcher.end(), equation.length());
                if (operatorMatcher.find()) {
                    String operator = operatorMatcher.group();

                    //Check for unary minus
                    if (operator.equals("-") && (numberMatcher.start() == 0 || equation.substring(numberMatcher.start() - 1, numberMatcher.start()).matches("[+\\-*/^]"))) {
                         double nextNumber = Double.parseDouble(outputQueue.remove(outputQueue.size() - 1));
                         outputQueue.add(String.valueOf(-1 * nextNumber));
                         continue;
                    }

                    //Shunting Yard
                    while (!operatorStack.isEmpty() && hasPrecedence(operatorStack.get(operatorStack.size() - 1), operator)) {
                        outputQueue.add(operatorStack.remove(operatorStack.size() - 1));
                    }
                    operatorStack.add(operator);
                }
            }
            lastNumberEnd = numberMatcher.end();
        }
        while (!operatorStack.isEmpty()) {
            outputQueue.add(operatorStack.remove(operatorStack.size() - 1));
        }

        //Evaluate the output queue using stack
        List<Double> evalStack = new ArrayList<>();
        for (String token : outputQueue) {
            if (token.matches("-?\\d+(\\.\\d+)?")) {
                evalStack.add(Double.parseDouble(token));
            } else {
                double val2 = evalStack.remove(evalStack.size() - 1);
                double val1 = evalStack.remove(evalStack.size() - 1);
                double result = performOperation(val1, val2, token);
                evalStack.add(result);
            }
        }

        return evalStack.get(0);
    }
    // Helper method to determine operator precedence
    private boolean hasPrecedence(String op1, String op2) {
        if (op1.equals("^")) return true;  // Exponentiation has highest precedence
        if ((op1.equals("*") || op1.equals("/")) && (op2.equals("+") || op2.equals("-"))) return true;
        return false;
    }

    private double performOperation(double val1, double val2, String operator) {
        switch (operator) {
            case "+": return val1 + val2;
            case "-": return val1 - val2;
            case "*": return val1 * val2;
            case "/":
                if (val2 == 0) throw new ArithmeticException("Division by zero.");
                return val1 / val2;
            case "^": return Math.pow(val1, val2);
            default: throw new IllegalArgumentException("Invalid operator: " + operator);
        }
    }
}

// View
class EquationView extends JFrame {

    private JTextField equationField;
    private JButton calculateButton;
    private JLabel resultLabel;

    public EquationView() {
        setTitle("Equation Calculator");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 150);
        setLayout(new FlowLayout());

        equationField = new JTextField(25);
        calculateButton = new JButton("Calculate");
        resultLabel = new JLabel("Result:");

        add(equationField);
        add(calculateButton);
        add(resultLabel);

        setVisible(true);
    }

    public String getEquation() {
        return equationField.getText();
    }

    public void setResult(String result) {
        resultLabel.setText("Result: " + result);
    }

    public void addCalculateListener(ActionListener listener) {
        calculateButton.addActionListener(listener);
    }

    public void displayErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Controller
class EquationController {

    private EquationModel model;
    private EquationView view;

    public EquationController(EquationModel model, EquationView view) {
        this.model = model;
        this.view = view;

        view.addCalculateListener(new CalculateListener());
    }

    class CalculateListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String equation = view.getEquation();
            try {
                double result = model.calculate(equation);
                view.setResult(String.valueOf(result));
            } catch (IllegalArgumentException ex) {
                view.displayErrorMessage(ex.getMessage());
            } catch (ArithmeticException ex){
                view.displayErrorMessage(ex.getMessage());
            }
        }
    }
}

// Main
public class EquationCalculator {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            EquationModel model = new EquationModel();
            EquationView view = new EquationView();
            new EquationController(model, view);
        });
    }
}
