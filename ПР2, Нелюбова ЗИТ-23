import .awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// Model
class EquationModel {

    public double calculate(String equation) {
        // Validate the equation
        validateEquation(equation);

        // Normalize the equation
        equation = normalizeEquation(equation);

        // Evaluate the equation (implementation details)
        return evaluateEquation(equation);
    }

    private void validateEquation(String equation) {
        if (equation == null || equation.isEmpty()) {
            throw new IllegalArgumentException("Equation cannot be empty.");
        }

        //Validate parenthesis balance
        int openParens = 0;
        for (char c : equation.toCharArray()) {
            if (c == '(') openParens++;
            else if (c == ')') openParens--;

            if (openParens < 0) throw new IllegalArgumentException("Unbalanced parenthesis.");
        }
        if (openParens != 0) throw new IllegalArgumentException("Unbalanced parenthesis.");


        // Equation must start and end with a number or parenthesis
        if (!Pattern.matches("^[-+]?(\\d+(\\.\\d*)?|\\.\\d+)(\\s*[-+*/^!log]|\\s*\\(|\\s*exp)*[-+]?(\\d+(\\.\\d*)?|\\.\\d+|\\))?$", equation.trim())) {
            throw new IllegalArgumentException("Equation must start and end with a number or parenthesis.");
        }


        //Check for invalid number of terms
        String[] terms = equation.split("[+\\-*/^]");
        if(terms.length > 15) {
            throw new IllegalArgumentException("Equation exceeds the maximum number of terms (15).");
        }

        //Check for consecutive operators
        if (equation.matches(".*[+\\-*/^]{2,}.*") ) {
                throw new IllegalArgumentException("Equation contains consecutive operators.");
        }


    }


    private String normalizeEquation(String equation) {
        //Remove whitespace
        equation = equation.replaceAll("\\s+", "");

        //Replace "**" with "^"
        equation = equation.replace("**", "^");

        return equation;
    }

    private double evaluateEquation(String equation) {
         Stack<Double> numbers = new Stack<>();
        Stack<Character> operators = new Stack<>();

        for (int i = 0; i < equation.length(); i++) {
            char currentChar = equation.charAt(i);

            if (Character.isDigit(currentChar) || currentChar == '.') {
                StringBuilder num = new StringBuilder();
                while (i < equation.length() && (Character.isDigit(equation.charAt(i)) || equation.charAt(i) == '.')) {
                    num.append(equation.charAt(i));
                    i++;
                }
                i--; // Backtrack to the last digit
                numbers.push(Double.parseDouble(num.toString()));
            } else if (currentChar == '(') {
                operators.push(currentChar);
            } else if (currentChar == ')') {
                while (operators.peek() != '(') {
                    numbers.push(applyOperator(operators.pop(), numbers.pop(), numbers.pop()));
                }
                operators.pop(); // Pop the '('
            } else if (isOperator(currentChar)) {
                while (!operators.isEmpty() && operators.peek() != '(' && hasPrecedence(currentChar, operators.peek())) {
                    numbers.push(applyOperator(operators.pop(), numbers.pop(), numbers.pop()));
                }
                operators.push(currentChar);
            }
             else if (equation.substring(i).startsWith("log(")) {
                int start = i + 4;
                int end = findClosingParen(equation.substring(i + 3)) + i + 3;
                if(end < i+3) throw new IllegalArgumentException("Mismatched parenthesis for log()");

                String subExpression = equation.substring(start, end);
                double value = calculate(subExpression);
                numbers.push(Math.log(value) / Math.log(2));
                i = end;
            }
             else if (equation.substring(i).startsWith("exp(")) {
                int start = i + 4;
                int end = findClosingParen(equation.substring(i + 3)) + i + 3;
                if(end < i+3) throw new IllegalArgumentException("Mismatched parenthesis for exp()");

                String subExpression = equation.substring(start, end);
                double value = calculate(subExpression);
                numbers.push(Math.exp(value));
                i = end;
            }
            else if (currentChar == '!') {
                double num = numbers.pop();
                numbers.push(factorial(num));
            }


        }

        while (!operators.isEmpty()) {
            numbers.push(applyOperator(operators.pop(), numbers.pop(), numbers.pop()));
        }

        if (numbers.size() != 1) {
            throw new IllegalArgumentException("Invalid equation format.");
        }

        return numbers.pop();

    }
    private int findClosingParen(String expression) {
        int openCount = 0;
        for (int i = 0; i < expression.length(); i++) {
            if (expression.charAt(i) == '(') {
                openCount++;
            } else if (expression.charAt(i) == ')') {
                if (openCount == 0) {
                    return i;
                }
                openCount--;
            }
        }
        return -1; //unbalanced
    }

    private  double factorial(double n) {
        if (n == 0) {
            return 1;
        }
        if (n < 0) {
            throw new IllegalArgumentException("Factorial is not defined for negative numbers.");
        }
        double result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }


    private boolean isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
    }
    private boolean hasPrecedence(char op1, char op2) {
         if (op2 == '(' || op2 == ')') return false;
        if (op1 == '^') return false; // ^ has right-to-left associativity
        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;
        return true;
    }


    private double applyOperator(char operator, double val2, double val1) {
       switch (operator) {
            case '+': return val1 + val2;
            case '-': return val1 - val2;
            case '*': return val1 * val2;
            case '/':
                if (val2 == 0) throw new ArithmeticException("Division by zero.");
                return val1 / val2;
            case '^': return Math.pow(val1, val2);
            default: throw new IllegalArgumentException("Invalid operator: " + operator);
        }
    }
}

// View
class EquationView extends JFrame {

    private JTextField equationField;
    private JButton calculateButton;
    private JLabel resultLabel;

    public EquationView() {
        setTitle("Equation Calculator");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 150);
        setLayout(new FlowLayout());

        equationField = new JTextField(25);
        calculateButton = new JButton("Calculate");
        resultLabel = new JLabel("Result:");

        add(equationField);
        add(calculateButton);
        add(resultLabel);

        setVisible(true);
    }

    public String getEquation() {
        return equationField.getText();
    }

    public void setResult(String result) {
        resultLabel.setText("Result: " + result);
    }

    public void addCalculateListener(ActionListener listener) {
        calculateButton.addActionListener(listener);
    }

    public void displayErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Controller
class EquationController {

    private EquationModel model;
    private EquationView view;

    public EquationController(EquationModel model, EquationView view) {
        this.model = model;
        this.view = view;

        view.addCalculateListener(new CalculateListener());
    }

    class CalculateListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String equation = view.getEquation();
            try {
                double result = model.calculate(equation);
                view.setResult(String.valueOf(result));
            } catch (IllegalArgumentException ex) {
                view.displayErrorMessage(ex.getMessage());
            } catch (ArithmeticException ex){
                view.displayErrorMessage(ex.getMessage());
            }
        }
    }
}

// Main
public class EquationCalculator {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            EquationModel model = new EquationModel();
            EquationView view = new EquationView();
            new EquationController(model, view);
        });
    }
}
